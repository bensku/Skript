test "relational variables expression/condition" when running minecraft "1.14.4":

	# Test entities holding relational variables

	# The variable names are odd to test encoding them in Base64 (this is to allow the use of more characters in NamespacedKey names)

	spawn a chicken at spawn of world "world"
	set {_chicken} to the last spawned chicken

	assert {_chicken} doesn't have relational variable {cool+io man} with "(Condition) Entities should not have a relational variable before it is set"
	set relational variable {cool+io man} of {_chicken} to true
	assert relational variable {cool+io man} of {_chicken} = true with "(Expression) The relational variable was set to be true, but it is not"
	assert {_chicken} has relational variable {cool+io man} with "(Condition) Entities should have a relational variable if it is set"
	clear relational variable {cool+io man} of {_chicken}
	assert {_chicken} doesn't have relational variable {cool+io man} with "(Condition) Entities should not have a relational variable after it is cleared"

	delete {_chicken}

	# Test blocks holding a serializable value

	set block at spawn of world "world" to a campfire
	set {_block} to block at spawn of world "world"

	assert {_block} doesn't have relational variable {enchantment} with "(Condition) Blocks should not have a relational variable before it is set"
	set relational variable {enchantment} of {_block} to sharpness 10
	assert relational variable {enchantment} of {_block} = sharpness 10 with "(Expression) The relational variable was set to be sharpness 10, but it is not"
	assert {_block} has relational variable {enchantment} with "(Condition) Blocks should have a relational variable if it is set"
	clear relational variable {enchantment} of {_block}
	assert {_block} doesn't have relational variable {enchantment} with "(Condition) Blocks should not have a relational variable after it is cleared"

	set block at spawn of world "world" to air

	# Test entities holding a non-serializable value

	spawn a pig at spawn of world "world"
	assert last spawned pig doesn't have relational variable {me} with "(Condition) Entities should not have a relational variable before it is set (Non-serializable Test)"
	set relational variable {me} of last spawned pig to last spawned pig
	assert relational variable {me} of last spawned pig = last spawned pig with "(Expression) The relational variable was set, but it is not (Non-serializable Test)"
	assert last spawned pig has relational variable {me} with "(Condition) Entities should have a relational variable if it is set (Non-serializable Test)"
	clear relational variable {me} of last spawned pig
	assert last spawned pig doesn't have relational variable {me} with "(Condition) Entities should not have a relational variable after it is cleared (Non-serializable Test)"
	delete last spawned pig

	# Test using list variables (Serializable)

	set block at spawn of world "world" to a campfire
	set {_block} to block at spawn of world "world"
	assert {_block} doesn't have relational variable {enchantment::sharpness} with "(Condition) Blocks should not have a relational variable before it is set (List Test)"
	set relational variable {enchantment::sharpness} of {_block} to sharpness 10
	assert relational variable {enchantment::sharpness} of {_block} = sharpness 10 with "(Expression) The relational variable was set to be sharpness 10, but it is not (List Test)"
	assert relational variable {enchantment::*} of {_block} = sharpness 10 with "(Expression) The full list should be just sharpness 10, but it is not (List Test)"
	assert {_block} doesn't have relational variable {enchantment::smite} with "(Condition) Blocks should not have a relational variable if the index was not set (List Test)"
	assert {_block} has relational variable {enchantment::sharpness} with "(Condition) Blocks should have a relational variable if it is set (List Test)"
	clear relational variable {enchantment::sharpness} of {_block}
	assert {_block} doesn't have relational variable {enchantment::sharpness} with "(Condition) Blocks should not have a relational variable after it is cleared (List Test)"
	set block at spawn of world "world" to air

	# Test using list variables (Non-serializable)

	spawn a pig at spawn of world "world"
	set {_pig} to the last spawned pig

	assert {_pig} doesn't have relational variable {me::1} and {me::2} with "(Condition) Entities should not have a relational variable before it is set (Non-serializable List Test)"
	set relational variable {me::1} of {_pig} to {_pig}
	assert relational variable {me::1} of {_pig} = {_pig} with "(Expression) The relational variable was set, but it is not (Non-serializable List Test)"
	assert relational variable {me::*} of {_pig} = {_pig} with "(Expression) The full list should be just the last spawned pig, but it is not (Non-serializable List Test)"
	assert {_pig} doesn't have relational variable {me::2} with "(Condition) Entities should not have a relational variable if the index was not set (Non-serializable List Test)"
	assert {_pig} has relational variable {me::1} with "(Condition) Entities should have a relational variable if it is set (Non-serializable List Test)"
	clear relational variable {me::1} of {_pig}
	assert {_pig} doesn't have relational variable {me::1} and {me::2} with "(Condition) Entities should not have a relational variable after it is cleared (Non-serializable List Test)"

	delete {_pig}

	# Test add, remove, remove all (Serializable)

	set block at spawn of world "world" to a campfire
	set {_block} to block at spawn of world "world"

	set relational variable {change::*} of {_block} to {_block} and sharpness 5
	assert relational variable {change::*} of {_block} contains ({_block} and sharpness 5) with "(Expression) The list was set, but it does not contain the set values (Changer Test)"
	remove sharpness 5 from relational variable {change::*} of {_block}
	assert relational variable {change::*} of {_block} = {_block} with "(Expression) The enchantment was removed from the list, but it is still in it (Changer Test)"
	add sharpness 5 and protection 4 to relational variable {change::*} of {_block}
	assert relational variable {change::*} of {_block} contains ({_block}, sharpness 5, and protection 4) with "(Expression) Enchanments were added to the list, but they are not present (% relational variable {change::*} of {_block}%) (Changer Test)"
	remove all enchantment types from relational variable {change::*} of {_block}
	assert relational variable {change::*} of {_block} = {_block} with "(Expression) The enchantments were removed from the list, but it still contains them (% relational variable {change::*} of {_block}%) (Changer Test)"

	set block at spawn of world "world" to air

	# Test add, remove, remove all (Non-serializable)

	spawn a pig at spawn of world "world"
	set {_pig} to the last spawned pig
	spawn a cow at spawn of world "world"
	set {_cow1} to the last spawned cow
	spawn a cow at spawn of world "world"
	set {_cow2} to the last spawned cow

	set relational variable {change::*} of {_pig} to {_pig} and {_cow1}
	assert relational variable {change::*} of {_pig} contains ({_pig} and {_cow1}) with "(Expression) The list was set, but it does not contain the set values (Non-serializable Changer Test)"
	remove {_cow1} from relational variable {change::*} of {_pig}
	assert relational variable {change::*} of {_pig} = {_pig} with "(Expression) The cow was removed from the list, but it is still in it (Non-serializable Changer Test)"
	add {_cow1} and {_cow2} to relational variable {change::*} of {_pig}
	assert relational variable {change::*} of {_pig} contains ({_pig}, {_cow1}, and {_cow2}) with "(Expression) Cows were added to the list, but they are not present (Non-serializable Changer Test)"
	remove all cows from relational variable {change::*} of {_pig}
	assert relational variable {change::*} of {_pig} = {_pig} with "(Expression) The cows were removed from the list, but it still contains them (Non-serializable Changer Test)"
	clear relational variable {change::*} of {_pig}

	delete {_pig}, {_cow1}, and {_cow2}

	# Test adding and removing numbers

	set block at spawn of world "world" to a campfire
	set {_block} to block at spawn of world "world"

	set relational variable {number} of {_block} to 10
	assert relational variable {number} of {_block} = 10 with "(Expression) The relational variable was set to 10, but it is not (Numbers Test)"
	add 10.5 to relational variable {number} of {_block}
	assert relational variable {number} of {_block} = 20.5 with "(Expression) 10 was added to the relational variable, but it is not 20.5 (Numbers Test)"
	remove 10 from relational variable {number} of {_block}
	assert relational variable {number} of {_block} = 10.5 with "(Expression) 10 was removed from the amount, but it is not 10.5 (Numbers Test)"
	clear relational variable {number} of {_block}
	assert {_block} doesn't have relational variable {number} with "(Condition) The relational variable was removed, but the block still has it (Numbers Test)"

	set block at spawn of world "world" to air

	# Adding to an empty list Test

	spawn a cow at spawn of world "world"
	set {_cow} to the last spawned cow

	add {_cow} to relational variable {cows::*} of {_cow}
	assert relational variable {cows::*} of {_cow} = {_cow} with "Adding to an empty list should work, but it didn't (Adding to an empty list Test)"

	delete {_cow}

	# Single vs. List Test
	# If the player has the relational variable {myTag::1}, then checking if they have {myTag} should return false

	spawn a pig at spawn of world "world"
	set {_pig} to the last spawned pig

	set relational variable {myTag::1} of {_pig} to true
	assert {_pig} doesn't have relational variable {myTag} with "A holder shouldn't have {myTag} if they only have {myTag::1} (Serializable Single vs. List Test)"

	set relational variable {myTag::1} of {_pig} to {_pig}
	assert {_pig} doesn't have relational variable {myTag} with "A holder shouldn't have {myTag} if they only have {myTag::1} (Non-serializable Single vs. List Test)"

	delete {_pig}

	# Item Serialization Test

	spawn a pig at spawn of world "world"
	set {_pig} to the last spawned pig

	set relational variable {item} of {_pig} to stone named "TEST"
	assert relational variable {item} of {_pig} = stone named "TEST" with "Item Serialization Test Failure - Please check the console for errors."

	delete {_pig}

	# Variable Serialization Test

	set {item} to wooden sword named "boat sword" with lore "made with the plank of a shipwreck"
	assert {item} is wooden sword named "boat sword" with lore "made with the plank of a shipwreck" with "The variable '{item}' was not properly set."
	delete {item}
